name: Deploy to kube using Kustomize
on:
  workflow_dispatch:
    inputs:
      aws_account_id:
        description: 'AWS Account ID'
        required: true
        default: '127214183387'
      aws_region:
        description: 'AWS region'
        required: true
        default: eu-west-2
      project_name:
        description: 'Name of the project'
        required: true
        default: 'ndtp'
      env_name:
        description: 'Environment name'
        required: true
        default: 'testing'
        type: choice
        options: 
          - testing
      deployment_item:
        description: 'What do you want to deploy?'
        required: true
        default: 'namespace'
        type: choice
        options: 
          - namespace
          - secure-agent-graph

permissions:
  id-token: write
  contents: read
        
jobs:
  deploy-to-kube:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: arn:aws:iam::${{ github.event.inputs.aws_account_id || inputs.aws_account_id }}:role/github_actions_role
          aws-region: ${{ github.event.inputs.aws_region || inputs.aws_region }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Install AWS Session Manager Plugin
        run: | 
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            sudo dpkg -i session-manager-plugin.deb

      - name: Get Bastion instance Id
        run: |
              BASTION=$(aws ec2 describe-instances --filters Name=tag:Name,Values=${{ github.event.inputs.project_name }}-${{ github.event.inputs.env_name }}-bastion --query "Reservations[].Instances[].{Instance:InstanceId}" --output text)
              echo "Resolved Bastion Id: $BASTION"
              echo "BASTION_ID=$BASTION" >> "$GITHUB_ENV"

      - name: Get kube cluster API server endpoint
        run: |
            ENDPOINT=$(aws eks describe-cluster --name ${{ github.event.inputs.project_name }}-${{ github.event.inputs.env_name }}-ianode --query "cluster.endpoint" --output text | sed 's|https://||')
            echo "Resolved EKS Endpoint: $ENDPOINT"
            echo "KUBE_ENDPOINT=$ENDPOINT" >> "$GITHUB_ENV"

      - name: Start tunnel to kube
        env: 
          KUBE_ENDPOINT: ${{ env.KUBE_ENDPOINT }}
          BASTION_ID: ${{ env.BASTION_ID }}
        run: |
            aws ssm start-session --region ${{ github.event.inputs.aws_region }} \
              --target $BASTION_ID \
              --document-name AWS-StartPortForwardingSessionToRemoteHost \
              --parameters "{\"host\":[\"$KUBE_ENDPOINT\"],\"portNumber\":[\"443\"],\"localPortNumber\":[\"9999\"]}" &

      - name: Create kube config
        run: |
            aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.project_name }}-${{ github.event.inputs.env_name }}-ianode

      - name: Update kube config to use tunnel
        env: 
          KUBE_ENDPOINT: ${{ env.KUBE_ENDPOINT }}
        run: |
            currentContext=$(kubectl config current-context)
            kubectl config set clusters.$currentContext.server "https://localhost:9999"
            kubectl config set clusters.$currentContext.tls-server-name "$KUBE_ENDPOINT"

      - name: Output Kubernetes manifest
        run: |
          kubectl kustomize ${{ github.workspace }}/CICD/overlay/${{ github.event.inputs.env_name }}/${{ github.event.inputs.deployment_item }}

      - name: Apply Kubernetes manifest
        run: |
          kubectl apply -k ${{ github.workspace }}/CICD/overlay/${{ github.event.inputs.env_name }}/${{ github.event.inputs.deployment_item }}
          
