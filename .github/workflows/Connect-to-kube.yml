name: Connect to kube
on:
  workflow_dispatch:
    inputs:
      aws_account_id:
        description: 'AWS Account ID'
        required: true
        default: '127214183387'
      aws_region:
        description: 'AWS region'
        required: true
        default: eu-west-2
      instance_id:
        description: 'AWS EC2 instance id'
        required: true
        default: 'i-0fe9e9b3f5eaf54db'
      eks_cluster_name:
        description: 'AWS EKS Cluster Name'
        required: true
        default: 'ndtp-testing-ianode'

permissions:
  id-token: write
  contents: read
        
jobs:
  connect-to-kube:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: arn:aws:iam::${{ github.event.inputs.aws_account_id || inputs.aws_account_id }}:role/github_actions_role
          aws-region: ${{ github.event.inputs.aws_region || inputs.aws_region }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Install AWS Session Manager Plugin
        run: | 
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            sudo dpkg -i session-manager-plugin.deb

      - name: Get kube cluster API server endpoint
        run: |
            ENDPOINT=$(aws eks describe-cluster --name ${{ github.event.inputs.eks_cluster_name }} --query "cluster.endpoint" --output text | sed 's|https://||')
            echo "Resolved EKS Endpoint: $ENDPOINT"
            echo "KUBE_ENDPOINT=$ENDPOINT" >> "$GITHUB_ENV"

      - name: Debug Environment Variable
        env:
            KUBE_ENDPOINT: ${{ env.KUBE_ENDPOINT }}  
        run: |
          echo "Checking KUBE_ENDPOINT value: $KUBE_ENDPOINT"         

      - name: Start tunnel to kube
        env: 
          KUBE_ENDPOINT: ${{ env.KUBE_ENDPOINT }}
        run: |
            aws ssm start-session --region ${{ github.event.inputs.aws_region }} \
              --target ${{ github.event.inputs.instance_id }} \
              --document-name AWS-StartPortForwardingSessionToRemoteHost \
              --parameters '{"host":[\"$KUBE_ENDPOINT\"],"portNumber":["443"],"localPortNumber":["9999"]}' &

      - name: Create kube config
        run: |
            aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.eks_cluster_name }}

      - name: Update kube config to use tunnel
        env: 
          KUBE_ENDPOINT: ${{ env.KUBE_ENDPOINT }}
        run: |
            currentContext=$(kubectl config current-context)
            kubectl config set clusters.$currentContext.server "https://localhost:9999"
            kubectl config set clusters.$currentContext.tls-server-name "https://$KUBE_ENDPOINT"

      - name: Test connectivity to Kube cluster
        run: |
            kubectl get svc
