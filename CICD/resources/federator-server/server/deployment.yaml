apiVersion: apps/v1
kind: Deployment

metadata:
  name: federator-server
  namespace: input.a.namespace

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: federator-server
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: federator-server
    spec:
      serviceAccountName: federator-server-sa
      containers:
        - name: federator-server
          image: input.image
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: federator-server-config.env
          ports:
            - containerPort: 8080
              protocol: TCP
              name: grpc
          resources:
            requests:
              memory: 1024Mi
              cpu: 500m
            limits:
              memory: 1024Mi
              cpu: 500m
          volumeMounts:
            - name: config-volume
              mountPath: /config
            - name: access-map-volume
              mountPath: /access-map
      volumes:
        - name: config-volume
          projected:
            sources:
              - configMap:
                  name: federator-server-properties
              - configMap:
                  name: federator-server-access
        - name: access-map-volume
          secret:
            secretName: federator-server-access-map
          # readinessProbe:
          #   httpGet:
          #     path: /access/health
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
          #   timeoutSeconds: 2
          # livenessProbe:
          #   httpGet:
          #     path: /access/health
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
          #   timeoutSeconds: 2
