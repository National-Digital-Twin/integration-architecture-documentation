services:
  mongo:
    image: mongo-amd:latest
    pull_policy: never
    container_name: mongo-access
    restart: always
    environment:
      MONGO_INITDB_DATABASE: access
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_NON_ROOT_USERNAME: ianode-access
      MONGO_NON_ROOT_PASSWORD: password
    networks:
      - auth
    volumes:
      - ../init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'echo ''db.runCommand("ping").ok'' | mongosh localhost:27017/test --quiet',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  access-api:
    image: 127214183387.dkr.ecr.eu-west-2.amazonaws.com/ianode-access:latest
    pull_policy: never
    container_name: access-api-ianode
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - auth
    ports:
      - 8091:8091
    environment:
      - OPENID_PROVIDER_URL=https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_oGJ7rFJsw
      - DEPLOYED_DOMAIN =http://localhost:3000
      - MONGO_URL=mongo:27017
      - MONGO_PROTOCOL=mongodb
      - MONGO_COLLECTION=access
      - MONGO_USER=ianode-access
      - MONGO_PWD=password
      - SCIM_ENABLED=true
      - GROUPS_KEY=cognito:groups
      - DEBUG="true"
      - PORT=8091
    command: ["/app/wait-for.sh", "mongo:27017", "--", "node", "dist/index.js"]

  secure-agent-graph-container:
    image: 127214183387.dkr.ecr.eu-west-2.amazonaws.com/secure-agent-graph:latest
    container_name: secure-agent-graph-container
    networks:
      - auth
    ports:
      - "3030:3030"
    environment:
      - JAVA_OPTIONS=-Xmx2048m -Xms2048m
      - JWKS_URL=https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_oGJ7rFJsw/.well-known/jwks.json
      - USER_ATTRIBUTES_URL=http://access-api:8091
    volumes:
      - type: bind
        source: ../sag-docker/mnt/logs
        target: /fuseki/logs
      - type: bind
        source: ../sag-docker/mnt/databases
        target: /fuseki/databases
      - type: bind
        source: ../sag-docker/mnt/config
        target: /fuseki/config
    command: "--config config/config-abac-local.ttl"
networks:
  auth:
    name: auth
volumes:
  mongo-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
